The serverless package and AWS SAM both provision the FAAS.

=Serverless Quick Start=

* provider agnostic
* configuration in serverless.yml
{{{bash
  export AWS_ACCESS_KEY_ID=<insert access id>
  export AWS_SECRET_ACCESS_KEY=<insert secret access key>
  npm install -g serverless
  serverless create --template aws-nodejs --path my-service
  serverless deploy -v
  # quickly upload and overwrite function code
  serverless deploy function -f hello
  # invoke function and return logs
  serverless invoke -f hello -l
  # fetch function logs and tail at 500 ms interval
  serverless logs -f hello -t -i 500
  serverless remove
}}}

{{{bash
  # creates a new Service
  serverless create -p [SERVICE NAME] -t aws-nodejs

  # install a service: convenience method to install a pre-made Serverless Service locally by downloading the Github repo and unzipping it
  serverless install -u [GITHUB URL OF SERVICE]

  # deploy all: use this when you have made changes to your Functions, Events or Resources in serverless.yml or you simply want to deploy all changes within your Service at the same time.
  serverless deploy -s [STAGE NAME] -r [REGION NAME] -v

  # deploy function: Use this to quickly overwrite your AWS Lambda code on AWS, allowing you to develop faster.
  serverless deploy function -f [FUNCTION NAME] -s [STAGE NAME] -r [REGION NAME]

  # invoke function: invokes an AWS Lambda Function on AWS and returns logs
  serverless invoke -f [FUNCTION NAME] -s [STAGE NAME] -r [REGION NAME] -l

  # streaming logs: stream all logs for a specific Function
  serverless logs -f [FUNCTION NAME] -s [STAGE NAME] -r [REGION NAME]
}}}

=Serverless Lifecycle Events=
	package
		package:cleanup
			-> aws:common:validate:validate
			-> aws:common:cleanupTempDir:cleanup
		package:initialize
		package:setupProviderConfiguration
		package:createDeploymentArtifacts
		package:compileFunctions
		package:compileEvents
		package:finalize
			-> aws:package:finalize:mergeCustomProviderResources
			-> aws:package:finalize:saveServiceState
			-> aws:common:moveArtifactsToPackage:move
	deploy
		before:deploy:deploy
			-> aws:common:validate:validate
			-> aws:common:moveArtifactsToTemp:move
		deploy:deploy
			-> aws:deploy:deploy:createStack
			-> aws:deploy:deploy:checkForChanges (1.17->)
			-> aws:deploy:deploy:uploadArtifacts
			-> aws:deploy:deploy:validateTemplate
			-> aws:deploy:deploy:updateStack
		deploy:finalize
			-> aws:deploy:finalize:cleanup
		deploy function
		deploy:function:initialize
		deploy:function:packageFunction
			-> package:function:package
		deploy:function:deploy
			-> aws:common:cleanupTempDir:cleanup
		deploy list
		deploy:list:log
	info
		info:info
			-> aws:info:validate
			-> aws:info:gatherData
			-> aws:info:displayServiceInfo
			-> aws:info:displayApiKeys
			-> aws:info:displayEndpoints
			-> aws:info:displayFunctions
			-> aws:info:displayStackOutputs
	remove
		remove:remove
	rollback
		rollback:initialize
		rollback:rollback
		rollback function
		rollback:function:rollback
	logs
		logs:logs
	invoke
		invoke:invoke
		invoke local
		invoke:local:loadEnvVars
		invoke:local:invoke
	create
		create:create
		config
		config:credentials:config
	install
		install:install
	login
		login:login
	logout
		logout:logout
	metrics
		metrics:metrics
	slstats
		slstats:slstats

=AWS/SAM=

* aws specific
* configuration in template.yaml

aws-cli & sam (server application model) install:
{{{bash
  apt-get install -y pip3 && \
    pip3 install --user \
    awscli \
    aws-sam-cli \
    aws-shell
  aws --version && sam --version
}}}

sam quick start:
{{{bash
  sam init --runtime python3.6 # cretes sam-app directory
  sam local start-api # tests application locally
}}}


sam reference:
{{{bash
  ## attach --debug flag for debug logging, --profile or --region to set defaults, -t or --template for specific template

  # build lambda source code and generate artifacts that target lambda's exec environment
  sam build
  sam build --use-container
  sam build && sam local invoke
  sam build && sam package --s3-bucket <bucketname>

  sam deploy # alias for aws cloudformation deploy

  # fetch logs generated by lambda function using fuction logical ID or function name
  sam logs -n HelloWorldFunction --stack-name mystack
  sam logs -n mystack-HelloWorldFunction-1FJ8PD36GML2Q -s '10min ago' -e '2min ago' --filter "error"
  sam logs -n HelloWorldFunction --stack-name mystack --tail

  sam package # alias for aws cloudformation package

  # publish packaged SAM template to AWS serverless application repository
  sam publish
  sam publish --template packaged.yaml --region us-east-1

  sam validate # validates template file

  # invoke function locally by using aws cli or sdk, starts a local endpoint that emulates AWS lambda
  sam local start-lambda
  sam local invoke -n "HelloWorldFunction" --endpoint-url "http://127.0.0.1:3001" --no-verify-ssl out.txt

  # run serverless app locally for quick development and testing, creates a local http server that hosts all functions
  # when accessed through a browser or cli it starts a docker container locally to invoke the function, reads CodeUri property of AWS::Serverless::Function
  sam local start-api

  # generates sample payloads from different event sources (S3, API Gateway, SNS) containing the information that the event sources send to your Lambda functions
  sam local generate-event s3 [put/delete]
  # generate a sample event and test lambda function locally
  sam local generate-event s3 [put/delete] --bucket <bucket> --key <key> | sam local invoke <function logical id>
}}}
