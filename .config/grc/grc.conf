# colors:
#   none, default, bold, underline, blink, reverse, concealed,
#   black, green, yellow, blue, magenta, cyan, white,
#   on_black, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white
#   beep

# Each line has form: keyword=value
#   where keyword is one of: regexp, colours, command, concat, skip, replace, count
#   Only regexp is mandatory, but it does not have much sense by itself unless you specify at least a colour, skip, replace or command keyword as well.
#   regexp is the regular expression to match.
#   colours is the list of colours, separated by commas (you can specify only one colour), each colour per one regexp group specified in regexp.
#   if you use special colour name "previous", colour of the previous line of text will be used (actually, if both the first and last character of the previous line are of different colour than the default one, colour of the first one will be used).
#   Another special colour name "unchanged" will leave the colour unchanged, useful if you need some context for matching regular expression and you want to leave the colour of context unchanged.
#   Yet another special name is an arbitrary string enclosed in straight quotes. This string will be inserted directly into the output in front of the matching expression. The string will be eval'ed, so you can use usual python escape sequences.
#   This is useful on a 256-colour enabled xterm, where e.g. colours="\033[38;5;22m" will give you a dark green (inspired by Rutger Ovidius). Caveat: the string cannot contain a comma. This is due to my laziness :-)
#   command is command to be executed when regexp matches. Its output will be mixed with normal stdout, use redirectors (>/dev/null) if you want to suppress it.
#   concat is the name of a file which the current line will be appended to when the regexp matches.
#   skip can be skip=yes, if that case the matched line is skipped (discarded from the output), or skip=no, when it is not skipped. Default (if you do not have skip keyword) is of course not skipped.
#   replace means the regular expression match will be replaced by the value. All the preceeding regular expressions will be evaluated against the original text, but if they match and the replacement changes the length of the text, the colouring will stay at the same positions, which is probably not what you want - therefore put the replace rule preferrably at the beginning of config file.
#   all the following regular expressions will be evaluated against the replaced text, not the original.
#   replacement is done by re.sub(), therefore you can use anything python supports - in particular, \1, \2 etc... to include text from the original matching groups, e.g:
#
#     regexp=(\d\d):(\d\d):(\d\d)
#     replace=\1h\2m\3s
#   will change time format from 09:43:59 into 09h43m59s

# count is one of words: once, more, stop, previous, block or unblock
#   once means that if the regexp is matched, its first occurrence is coloured and the program will continue with other regexp's.
#   more means that if there are multiple matches of the regexp in one line, all of them will be coloured.
#   stop means that the regexp will be coloured and program will move to the next line (i.e. ignoring other regexp's)
#   previous means the count will be the same as for the previous line
#   block marks a start of a multiline block of text, coloured with the same colour
#   unblock, obviously, marks the end of such a block
