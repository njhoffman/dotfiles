[main]
asterisk_column_order = table_order
auto_expand = True
generate_aliases = True
keyring = False
keyword_casing = auto
min_num_menu_lines = 10
multi_line = True
pager = less -SRXFE
prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
row_limit = 1000
search_path_filter = False
smart_completion = True
timing = True
vi = True
wider_completion_menu = True

[colors]
output.header = "#00dc8f"
output.odd-row = "#88aacc"
output.even-row = "#aadddd"
# output.odd-row = "#88ccdd"
# output.even-row = "#77bbdd"


# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: psql, fancy_grid and grid.
# table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# [colors]
# Token.Menu.Completions.Completion.Current = 'bg:#ffffff #000000'
# Token.Menu.Completions.Completion = 'bg:#008888 #ffffff'
# Token.Menu.Completions.Meta.Current = 'bg:#44aaaa #000000'
# Token.Menu.Completions.Meta = 'bg:#448888 #ffffff'
# Token.Menu.Completions.MultiColumnMeta = 'bg:#aaffff #000000'
# Token.Menu.Completions.ProgressButton = 'bg:#003333'
# Token.Menu.Completions.ProgressBar = 'bg:#00aaaa'
# Token.SelectedText = '#ffffff bg:#6666aa'
# Token.SearchMatch = '#ffffff bg:#4444aa'
# Token.SearchMatch.Current = '#ffffff bg:#44aa44'
# Token.Toolbar = 'bg:#222222 #aaaaaa'
# Token.Toolbar.Off = 'bg:#222222 #888888'
# Token.Toolbar.On = 'bg:#222222 #ffffff'
# Token.Toolbar.Search = 'noinherit bold'
# Token.Toolbar.Search.Text = 'nobold'
# Token.Toolbar.System = 'noinherit bold'
# Token.Toolbar.Arg = 'noinherit bold'
# Token.Toolbar.Arg.Text = 'nobold'
# Token.Toolbar.Transaction.Valid = 'bg:#222222 #00ff5f bold'
# Token.Toolbar.Transaction.Failed = 'bg:#222222 #ff005f bold'


[named queries]

meta_db_sizes='''
SELECT
  pg_database.datname,
  pg_size_pretty(pg_database_size(pg_database.datname)) AS size
FROM pg_database
ORDER BY datname;
'''

meta_running_queries='''
SELECT datname, pid, state, query, age(clock_timestamp(), query_start) AS age
  FROM pg_stat_activity
  WHERE state <> 'idle'
    AND query NOT LIKE '% FROM pg_stat_activity %'
  ORDER BY age;
'''

meta_stat_statements='''
SELECT
  round(CAST(total_time AS numeric), 4) AS total,
  round(CAST((total_time/calls) AS numeric), 4) AS avg,
  calls,
  left(query, 50)
FROM pg_stat_statements
ORDER BY 1 DESC
LIMIT 100
# userid, dbid, queryid, query, calls, total_time, min_time, max_time, mean_time, stddev_time, rows,
# [shared|local]_blks_[hit|read|dirtied|written] temp_blks_[read|written] blk_[read_write]_time
'''

meta_table_count='''
  SELECT table_schema, table_name,
  (xpath('/row/cnt/text()', xml_count))[1]::text::int as row_count
  FROM (
    SELECT table_name, table_schema,
    query_to_xml(format('select count(*) as cnt from %I.%I', table_schema, table_name), false, true, '') AS xml_count
    FROM information_schema.tables
    WHERE table_schema = '$1'
    ORDER BY table_name
  ) t
'''

meta_table_size='''
  SELECT oid, table_schema, table_name, row_estimate
  , pg_size_pretty(index_bytes) AS INDEX
  , pg_size_pretty(toast_bytes) AS toast
  , pg_size_pretty(table_bytes) AS TABLE
  , pg_size_pretty(total_bytes) AS total
  FROM (
    SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (
      SELECT c.oid, nspname AS table_schema, relname AS table_name
      , c.reltuples AS row_estimate
      , pg_total_relation_size(c.oid) AS total_bytes
      , pg_indexes_size(c.oid) AS index_bytes
      , pg_total_relation_size(reltoastrelid) AS toast_bytes
      FROM pg_class c
      LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
      WHERE relkind = 'r' AND nspname = '$1'
      ORDER BY total_bytes DESC
    ) a
  ) a
'''

sd_appts_created='''
SELECT
    TO_CHAR(lower(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS start,
    TO_CHAR(upper(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS end,
    street_1,
    city,
    customer_accounts.id,
    customer_accounts.first_name || ' ' || customer_accounts.last_name AS customer,
    TO_CHAR(appointments.created_at AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') created_at,
    provider_accounts.first_name AS provider_name,
    status
FROM spadash_api.appointments
LEFT JOIN spadash_api.customer_accounts ON customer_accounts.id = appointments.customer_id
LEFT JOIN spadash_api. provider_accounts ON provider_accounts.id = appointments.provider_id
WHERE lower(duration) > now() - interval '1 days'
ORDER BY appointments.id
'''

sd_appts_date='''
SELECT
    TO_CHAR(lower(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS start,
    TO_CHAR(upper(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS end,
    street_1,
    city,
    customer_accounts.id,
    customer_accounts.first_name || ' ' || customer_accounts.last_name AS customer,
    TO_CHAR(appointments.created_at AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') created_at,
    provider_accounts.first_name AS provider_name,
    status
FROM spadash_api.appointments
LEFT JOIN spadash_api.customer_accounts ON customer_accounts.id = appointments.customer_id
LEFT JOIN spadash_api. provider_accounts ON provider_accounts.id = appointments.provider_id
WHERE lower(duration) > date($1) - interval '1 days'
ORDER BY lower(duration) ASC;
'''

sd_appts_past='''
SELECT
    TO_CHAR(lower(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS start,
    TO_CHAR(upper(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS end,
    street_1,
    city,
    customer_accounts.id,
    customer_accounts.first_name || ' ' || customer_accounts.last_name AS customer,
    TO_CHAR(appointments.created_at AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') created_at,
    provider_accounts.first_name AS provider_name,
    status
FROM spadash_api.appointments
LEFT JOIN spadash_api.customer_accounts ON customer_accounts.id = appointments.customer_id
LEFT JOIN spadash_api. provider_accounts ON provider_accounts.id = appointments.provider_id
WHERE lower(duration) <= now()
ORDER BY lower(duration) DESC;
'''

sd_appts_start='''
SELECT
    TO_CHAR(lower(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS start,
    TO_CHAR(upper(duration) AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') AS end,
    street_1,
    city,
    customer_accounts.id,
    customer_accounts.first_name || ' ' || customer_accounts.last_name AS customer,
    TO_CHAR(appointments.created_at AT TIME ZONE 'America/Chicago', 'mm/dd HH:MI') created_at,
    provider_accounts.first_name AS provider_name,
    status
FROM spadash_api.appointments
LEFT JOIN spadash_api.customer_accounts ON customer_accounts.id = appointments.customer_id
LEFT JOIN spadash_api. provider_accounts ON provider_accounts.id = appointments.provider_id
WHERE lower(duration) > now() - interval '1 days'
ORDER BY lower(duration) ASC;
'''

sd_invoices='''
SELECT
  COUNT(*),
  SUM(discounted_convenience_fee_cost_usd + discounted_services_cost_usd),
  SUM(provider_payment_usd) AS provider_payout
FROM spadash_api.appointment_invoices
WHERE appointment_id IN (
  SELECT id FROM spadash_api.appointments
    WHERE lower(duration) >= '2020-06-01 00:00:00'
      AND lower(duration) <= '2020-06-30 23:59:59-05'
      AND status = 'completed'
  )
'''

sd_shifts='''
SELECT
    id,
    provider_id,
    begin_location,
    lower(duration) at time zone 'America/Chicago' AS start,
    upper(duration) at time zone 'America/Chicago' AS end
FROM spadash_api.shifts
WHERE shift_status = 'pending' AND lower(duration) > now()
ORDER BY provider_id, duration ASC;
'''

