" Vim color file
"
"  "    __       _ _       _                             "
"  "    \ \  ___| | |_   _| |__   ___  __ _ _ __  ___    "
"  "     \ \/ _ \ | | | | |  _ \ / _ \/ _  |  _ \/ __|   "
"  "  /\_/ /  __/ | | |_| | |_| |  __/ |_| | | | \__ \   "
"  "  \___/ \___|_|_|\__  |____/ \___|\____|_| |_|___/   "
"  "                 \___/                               "
"
"         "A colorful, dark color scheme for Vim."
"
" File:         jellybeans.vim
" Maintainer:   NanoTech <http://nanotech.nanotechcorp.net/>
" Version:      1.6~git
" Last Change:  January 15th, 2012
"

set background=dark

hi clear

if exists("syntax_on")
  syntax reset
endif

let colors_name = "jellybeans"

if has("gui_running") || &t_Co == 88 || &t_Co == 256
  let s:low_color = 0
else
  let s:low_color = 1
endif

" color approximation functions

" returns an approximate grey index for the given grey level
fun! s:grey_number(x)
  if &t_Co == 88
    if a:x < 23
      return 0
    elseif a:x < 69
      return 1
    elseif a:x < 103
      return 2
    elseif a:x < 127
      return 3
    elseif a:x < 150
      return 4
    elseif a:x < 173
      return 5
    elseif a:x < 196
      return 6
    elseif a:x < 219
      return 7
    elseif a:x < 243
      return 8
    else
      return 9
    endif
  else
    if a:x < 14
      return 0
    else
      let l:n = (a:x - 8) / 10
      let l:m = (a:x - 8) % 10
      if l:m < 5
        return l:n
      else
        return l:n + 1
      endif
    endif
  endif
endfun

" returns the actual grey level represented by the grey index
fun! s:grey_level(n)
if &t_Co == 88
  if a:n == 0
    return 0
  elseif a:n == 1
    return 46
  elseif a:n == 2
    return 92
  elseif a:n == 3
    return 115
  elseif a:n == 4
    return 139
  elseif a:n == 5
    return 162
  elseif a:n == 6
    return 185
  elseif a:n == 7
    return 208
  elseif a:n == 8
    return 231
  else
    return 255
  endif
else
  if a:n == 0
    return 0
  else
    return 8 + (a:n * 10)
  endif
endif
endfun

" returns the palette index for the given grey index
fun! s:grey_color(n)
if &t_Co == 88
  if a:n == 0
    return 16
  elseif a:n == 9
    return 79
  else
    return 79 + a:n
  endif
else
  if a:n == 0
    return 16
  elseif a:n == 25
    return 231
  else
    return 231 + a:n
  endif
endif
endfun

" returns an approximate color index for the given color level
fun! s:rgb_number(x)
if &t_Co == 88
  if a:x < 69
    return 0
  elseif a:x < 172
    return 1
  elseif a:x < 230
    return 2
  else
    return 3
  endif
else
  if a:x < 75
    return 0
  else
    let l:n = (a:x - 55) / 40
    let l:m = (a:x - 55) % 40
    if l:m < 20
      return l:n
    else
      return l:n + 1
    endif
  endif
endif
endfun

" returns the actual color level for the given color index
fun! s:rgb_level(n)
if &t_Co == 88
  if a:n == 0
    return 0
  elseif a:n == 1
    return 139
  elseif a:n == 2
    return 205
  else
    return 255
  endif
else
  if a:n == 0
    return 0
  else
    return 55 + (a:n * 40)
  endif
endif
endfun

" returns the palette index for the given R/G/B color indices
fun! s:rgb_color(x, y, z)
if &t_Co == 88
  return 16 + (a:x * 16) + (a:y * 4) + a:z
else
  return 16 + (a:x * 36) + (a:y * 6) + a:z
endif
endfun

" returns the palette index to approximate the given R/G/B color levels
fun! s:color(r, g, b)
" get the closest grey
let l:gx = s:grey_number(a:r)
let l:gy = s:grey_number(a:g)
let l:gz = s:grey_number(a:b)

" get the closest color
let l:x = s:rgb_number(a:r)
let l:y = s:rgb_number(a:g)
let l:z = s:rgb_number(a:b)

if l:gx == l:gy && l:gy == l:gz
  " there are two possibilities
  let l:dgr = s:grey_level(l:gx) - a:r
  let l:dgg = s:grey_level(l:gy) - a:g
  let l:dgb = s:grey_level(l:gz) - a:b
  let l:dgrey = (l:dgr * l:dgr) + (l:dgg * l:dgg) + (l:dgb * l:dgb)
  let l:dr = s:rgb_level(l:gx) - a:r
  let l:dg = s:rgb_level(l:gy) - a:g
  let l:db = s:rgb_level(l:gz) - a:b
  let l:drgb = (l:dr * l:dr) + (l:dg * l:dg) + (l:db * l:db)
  if l:dgrey < l:drgb
    " use the grey
    return s:grey_color(l:gx)
  else
    " use the color
    return s:rgb_color(l:x, l:y, l:z)
  endif
else
  " only one possibility
  return s:rgb_color(l:x, l:y, l:z)
endif
endfun

" returns the palette index to approximate the 'rrggbb' hex string
fun! s:rgb(rgb)
let l:r = ("0x" . strpart(a:rgb, 0, 2)) + 0
let l:g = ("0x" . strpart(a:rgb, 2, 2)) + 0
let l:b = ("0x" . strpart(a:rgb, 4, 2)) + 0
return s:color(l:r, l:g, l:b)
endfun

" sets the highlighting for the given group
fun! s:X(group, fg, bg, attr, lcfg, lcbg)
if s:low_color
  let l:fge = empty(a:lcfg)
  let l:bge = empty(a:lcbg)

  if !l:fge && !l:bge
    exec "hi ".a:group." ctermfg=".a:lcfg." ctermbg=".a:lcbg
  elseif !l:fge && l:bge
    exec "hi ".a:group." ctermfg=".a:lcfg." ctermbg=NONE"
  elseif l:fge && !l:bge
    exec "hi ".a:group." ctermfg=NONE ctermbg=".a:lcbg
  endif
else
  let l:fge = empty(a:fg)
  let l:bge = empty(a:bg)

  if !l:fge && !l:bge
    exec "hi ".a:group." guifg=#".a:fg." guibg=#".a:bg." ctermfg=".s:rgb(a:fg)." ctermbg=".s:rgb(a:bg)
  elseif !l:fge && l:bge
    exec "hi ".a:group." guifg=#".a:fg." guibg=NONE ctermfg=".s:rgb(a:fg)." ctermbg=NONE"
  elseif l:fge && !l:bge
    exec "hi ".a:group." guifg=NONE guibg=#".a:bg." ctermfg=NONE ctermbg=".s:rgb(a:bg)
  endif
endif

if a:attr == ""
  exec "hi ".a:group." gui=none cterm=none"
else
  let noitalic = join(filter(split(a:attr, ","), "v:val !=? 'italic'"), ",")
  if empty(noitalic)
    let noitalic = "none"
  endif
  exec "hi ".a:group." gui=".a:attr." cterm=".noitalic
endif
endfun
" }}}

" call s:X("Normal","e8e8d3","","","White","")
call s:X("Normal","c4d0c4","","","White","")
set background=dark

if !exists("g:jellybeans_use_lowcolor_black") || g:jellybeans_use_lowcolor_black
  let s:termBlack = "Black"
else
  let s:termBlack = "Grey"
endif


if version >= 700
  call s:X("CursorLine","","","","",s:termBlack)
  call s:X("CursorLineNR", "afd7ff","","","",s:termBlack)
  " call s:X("CursorLineNR","FFFF00","","","",s:termBlack)
  call s:X("CursorColumn","","ffffff","","",s:termBlack)
  call s:X("MatchParen","ffffff","80a090","bold","","DarkCyan")

  " Tabs
  call s:X("TabLine","000000","b0b8c0","","",s:termBlack)
  call s:X("TabLineFill","9098a0","","","",s:termBlack)
  call s:X("TabLineSel","000000","f0f0f0","bold",s:termBlack,"White")

  " Auto-completion
  hi! Pmenu ctermbg=234 ctermfg=250
  hi! PmenuSel ctermbg=23 ctermfg=255
  hi! PmenuThumb ctermbg=23 ctermfg=255
  " call s:X("PmenuSbar","cccccc","222266","","White","Blue")
endif

call s:X("Visual","","404040","","",s:termBlack)
call s:X("Cursor","","b0d0f0","","","")

call s:X("LineNr","605958","","none",s:termBlack,"")
call s:X("Comment","888888","","","Grey","")
call s:X("Todo","808080","","bold","White",s:termBlack)

call s:X("StatusLine","000000","dddddd","","","White")
call s:X("StatusLineNC","ffffff","403c41","","White","Black")
call s:X("StatusLineAir","ff0000","","","","White")
call s:X("StatusLineAirNC","ff0000","","","White","Black")
call s:X("VertSplit","777777","403c41","",s:termBlack,s:termBlack)
call s:X("WildMenu","f0a0c0","302028","","Magenta","")

call s:X("Folded","888888","","",s:termBlack,"")
call s:X("FoldColumn","535D66","000000","","",s:termBlack)
call s:X("SignColumn","777777","333333","","",s:termBlack)
call s:X("ColorColumn","","000000","","",s:termBlack)

call s:X("Title","CCCCCC","","bold","Green","")

call s:X("Constant","87afff","","","Red","")
call s:X("Special","799d6a","","","Green","")
call s:X("Delimiter","7F90AA","","","Grey","")
call s:X("Keyword","BECDE6","","","Grey","")
call s:X("Type","BECDE6","","","Grey","")

" call s:X("String","37bc7a","","","Green","")
call s:X("String","22BB99","","","Green","")
call s:X("StringDelimiter","556633","","","DarkGreen","")

call s:X("Identifier","BEA9E6","","","LightCyan","")
call s:X("Structure","8fbfdc","","","LightCyan","")
call s:X("Function","E2BD8C","","","Yellow","")
" call s:X("Function","FD971F","","","Yellow","")
call s:X("Statement","8197bf","","","DarkBlue","")
call s:X("PreProc","8fbfdc","","","LightBlue","")

hi! link Operator Normal

call s:X("NonText","606060","000000","",s:termBlack,"")

call s:X("SpecialKey","444444","1c1c1c","",s:termBlack,"")

call s:X("Search","afffff","","","Magenta","")
" call s:X("Search","afd7ff","","","Magenta","")

call s:X("Directory","dad085","","","Yellow","")
call s:X("ErrorMsg","","902020","","","DarkRed")
hi! link Error ErrorMsg
hi! link MoreMsg Special
call s:X("Question","65C254","","","Green","")

" Dim inactive window, requires automatic window enter/leave function
hi! ActiveWindow ctermbg=232
hi! InactiveWindow ctermbg=234

" PSL
call s:X('pslNegative', "B0BAF7", "", "", "Blue", "")
call s:X('pslPositive', "B0BAF7", "", "", "Blue", "")
call s:X('pslImport', "E2DCBC", "", "", "Yellow", "")
call s:X('pslMultiline', "FF6600", "", "", "Orange", "")
call s:X('pslValue', "B0BAF7", "", "", "Blue", "")

" SpiderCode
call s:X("spiderCodeBlock","FF0000","","","Red", "")
call s:X("spiderCodeKeyword","cf6a4c","","","Red", "")


" TCF/TCA
"
call s:X("tcfAttrName","7F93E2","","","LightBlue","")
call s:X("tcfAttrValue","C8C8C8","","","Grey","")
call s:X("tcfAttrDiv","AACCFF","","","White","")
call s:X("tcfAttrRev","888888","","","Grey","")
call s:X("tcfAttrRevNum","888888","","","Grey","")
call s:X("tcfAttrRevName","888888","","","Grey","")
call s:X("tcfAttrRevDiv","888888","","","Grey","")
call s:X("tcfAttrRevValue","888888","","","Grey","")

" Spell Checking

call s:X("SpellBad","","902020","underline","","DarkRed")
call s:X("SpellCap","","0000df","underline","","Blue")
call s:X("SpellRare","","540063","underline","","DarkMagenta")
call s:X("SpellLocal","","2D7067","underline","","Green")

" Diff

hi! link diffRemoved Constant
hi! link diffAdded String

" VimDiff

call s:X("DiffAdd","D2EBBE","437019","","White","DarkGreen")
call s:X("DiffDelete","40000A","700009","","DarkRed","DarkRed")
call s:X("DiffChange","","2B5B77","","White","DarkBlue")
call s:X("DiffText","8fbfdc","000000","reverse","Yellow","")

" HTML

call s:X("htmlTag","7F90AA","","","Grey","")
call s:X("htmlEndTag","7F90AA","","","Grey","")
call s:X("htmlArg","7F90AA","","","Grey","")
call s:X("htmlTagName","7F90AA","","","Grey","")
call s:X("htmlItalic","e8e8d3","000000","","Grey","")
call s:X("htmlLink","aaddff","","","Grey","")

" PHP

hi! link phpFunctions Function
call s:X("StorageClass","c59f6f","","","Red","")
hi! link phpSuperglobal Identifier
hi! link phpQuoteSingle StringDelimiter
hi! link phpQuoteDouble StringDelimiter
hi! link phpBoolean Constant
hi! link phpNull Constant
hi! link phpArrayPair Operator

" Python

hi! link pythonOperator Statement

" Ruby

hi! link rubySharpBang Comment
call s:X("rubyClass","447799","","","DarkBlue","")
call s:X("rubyIdentifier","c6b6fe","","","Cyan","")
hi! link rubyConstant Type
hi! link rubyFunction Function

call s:X("rubyInstanceVariable","c6b6fe","","","Cyan","")
call s:X("rubySymbol","7697d6","","","Blue","")
hi! link rubyGlobalVariable rubyInstanceVariable
hi! link rubyModule rubyClass
call s:X("rubyControl","7597c6","","","Blue","")

hi! link rubyString String
hi! link rubyStringDelimiter StringDelimiter
hi! link rubyInterpolationDelimiter Identifier

call s:X("rubyRegexpDelimiter","540063","","","Magenta","")
call s:X("rubyRegexp","9955cc","","","DarkMagenta","")
call s:X("rubyRegexpSpecial","a40073","","","Magenta","")

call s:X("rubyPredefinedIdentifier","de5577","","","Red","")

" JavaScript

hi! link javaScriptValue Constant
hi! link jsRegexpString rubyRegexp
call s:X("javascriptBraces","FFFFFF","","","Magenta","")
call s:X("javaScript", "CCCCCC","","","White","")
call s:X("jsxTag", "FF6600","","","Orange","")
call s:X("jsObjectKey", "cccccc", "", "", "Cyan", "")
call s:X("jsObjectProp", "bbbbbb", "", "", "White", "")
call s:X("jsObjectValue", "bbbbbb", "", "", "White", "")
call s:X("jsClassProperty", "aaddff", "", "", "White", "")
" call s:X("jsClassFuncName", "cccccc", "", "", "White", "")
call s:X("jsFuncName", "ff8800", "", "", "White", "")
" call s:X("jsFuncCall", "dddddd", "", "", "White", "")
call s:X("jsFuncCall", "eeeeee", "", "", "White", "")
call s:X("jsThis", "aaddff", "", "", "White", "")
" call s:X("jsGlobalObjects", "cccccc", "", "", "White", "")
call s:X("jsTemplateBraces", "b9bc6b", "", "", "Brown", "")
call s:X("jsTemplateString","37acaa","","","Green","")
" hi! link jsTemplateString String
hi! link xmlTagName jsxTag
hi! link xmlTag jsxTag

" CoffeeScript

hi! link coffeeRegExp javaScriptRegexpString

" Lua

hi! link luaOperator Conditional

" C

hi! link cOperator Constant

" Objective-C/Cocoa

hi! link objcClass Type
hi! link cocoaClass objcClass
hi! link objcSubclass objcClass
hi! link objcSuperclass objcClass
hi! link objcDirective rubyClass
hi! link objcStatement Constant
hi! link cocoaFunction Function
hi! link objcMethodName Identifier
hi! link objcMethodArg Normal
hi! link objcMessageName Identifier


"**************
" PLUGINS
"**************

call s:X("VimWikiLink","00bbff","","","Green","")

call s:X("GitGutterAdd","007700","","","Green","")
call s:X("GitGutterChange","999900","","","Yellow","")
call s:X("GitGutterDelete","880000","","","Red","")

hi! link CocErrorHighlight none
hi! link CocWarningHighlight none
hi! link CocInfoHighlight none
hi! link CocHintHighlight none

" Sign highlighting
call s:X("SyntasticErrorSign", "ff0000","","","Red","")
call s:X("SyntasticWarningSign", "ffff00","","","Yellow","")
call s:X("SyntasticError", "", "", "", "White", "")
call s:X("SyntasticWarning", "", "", "", "White", "")
" highlight SyntasticErrorLine guibg=#2f000

" ALE linter highlighting
call s:X("ALEError", "", "", "", "", "")
" call s:X("ALEErrorSign", "", "550000", "", "Red", "")
call s:X("ALEErrorSign","AA0000", "",  "", "Red", "")
call s:X("ALEWarning", "", "", "", "", "")
" call s:X("ALEWarning", "", "000055", "", "", "Blue")
" call s:X("ALEErrorLine", "", "550000", "", "Red", "")
" hi! link ALEWarning Warning
" hi! link ALEWarningLine Warning
" hi! link ALEWarningSign Warning
" ALEErrorSign
" ALEInfoSign
" ALEInfoLine
" ALEStyleError
" ALEStyleErrorSign
" ALEStyleWarning
" ALEStyleWarningSign
" ALEVirtualTextError
" ALEVirtualTextInfo
" ALEVirtualTextStyleError
" ALEVirtualTextStyleWarning
" ALEVirtualTextWarning





" Debugger.vim

call s:X("DbgCurrent","DEEBFE","345FA8","","White","DarkBlue")
call s:X("DbgBreakPt","","4F0037","","","DarkMagenta")

" vim-indent-guides

if !exists("g:indent_guides_auto_colors")
  let g:indent_guides_auto_colors = 0
endif
call s:X("IndentGuidesOdd","","232323","","","")
call s:X("IndentGuidesEven","","1b1b1b","","","")

" Plugins, etc.

hi! link TagListFileName Directory
call s:X("PreciseJumpTarget","B9ED67","405026","","White","Green")

" Manual overrides for 256-color terminals. Dark colors auto-map badly.
if !s:low_color
  hi StatusLineAir ctermbg=235 ctermfg=42
  hi StatusLineAirNC ctermbg=235 ctermfg=249
  hi StatusLineNC ctermbg=256
  hi Folded ctermbg=256
  hi FoldColumn ctermbg=256
  hi SignColumn ctermbg=256
  hi CursorColumn ctermbg=256
  hi CursorLine ctermbg=256
  hi SpecialKey ctermbg=256
  hi NonText ctermbg=None
  hi LineNr ctermbg=None
  hi DiffText ctermfg=81
  hi Normal ctermbg=None
  hi DbgBreakPt ctermbg=53
  hi IndentGuidesOdd ctermbg=256
  hi IndentGuidesEven ctermbg=256
endif

" delete functions {{{
delf s:X
delf s:rgb
delf s:color
delf s:rgb_color
delf s:rgb_level
delf s:rgb_number
delf s:grey_color
delf s:grey_level
delf s:grey_number
" }}}
