require"surround".setup { load_keymaps = false, mappings_style = "surround" }

-- i  <C-S>"<C-S> * "<CR>"<Esc>O
-- i  <C-S>"<Space> * "  "<Left><Left>
-- i  <C-S>"      * ""<Left>
-- i  <C-S>`<C-S> * `<CR>`<Esc>O
-- i  <C-S>`<Space> * `  `<Left><Left>
-- i  <C-S>`      * ``<Left>
-- i  <C-S>'<C-S> * '<CR>'<Esc>O
-- i  <C-S>'<Space> * '  '<Left><Left>
-- i  <C-S>'      * ''<Left>
-- i  <C-S>{<C-S> * {<CR>}<Esc>O
-- i  <C-S>{<Space> * {  }<Left><Left>
-- i  <C-S>{      * {}<Left>
-- i  <C-S>[<C-S> * [<CR>]<Esc>O
-- i  <C-S>[<Space> * [  ]<Left><Left>
-- i  <C-S>[      * []<Left>
-- i  <C-S>(<C-S> * (<CR>)<Esc>O
-- i  <C-S>(<Space> * (  )<Left><Left>
-- i  <C-S>(      * ()<Left>
vim.cmd([[nnoremap  csBB <Cmd>lua require'surround'.surround_replace("{","{")<CR>]])
vim.cmd([[nnoremap  csB) <Cmd>lua require'surround'.surround_replace("{",")")<CR>]])
vim.cmd([[nnoremap  csB' <Cmd>lua require'surround'.surround_replace("{","'")<CR>]])
vim.cmd([[nnoremap  csBb <Cmd>lua require'surround'.surround_replace("{","(")<CR>]])
vim.cmd([[nnoremap  csB` <Cmd>lua require'surround'.surround_replace("{","`")<CR>]])
vim.cmd([[nnoremap  csB" <Cmd>lua require'surround'.surround_replace("{",'"')<CR>]])
vim.cmd([[nnoremap  csB] <Cmd>lua require'surround'.surround_replace("{","]")<CR>]])
vim.cmd([[nnoremap  csB} <Cmd>lua require'surround'.surround_replace("{","}")<CR>]])
vim.cmd([[nnoremap  csB[ <Cmd>lua require'surround'.surround_replace("{","[")<CR>]])
vim.cmd([[nnoremap  csBf <Cmd>lua require'surround'.surround_replace("{","f")<CR>]])
vim.cmd([[nnoremap  csB{ <Cmd>lua require'surround'.surround_replace("{","{")<CR>]])
vim.cmd([[nnoremap  csB( <Cmd>lua require'surround'.surround_replace("{","(")<CR>]])
vim.cmd([[nnoremap  cs)B <Cmd>lua require'surround'.surround_replace(")","{")<CR>]])
vim.cmd([[nnoremap  cs)) <Cmd>lua require'surround'.surround_replace(")",")")<CR>]])
vim.cmd([[nnoremap  cs)' <Cmd>lua require'surround'.surround_replace(")","'")<CR>]])
vim.cmd([[nnoremap  cs)b <Cmd>lua require'surround'.surround_replace(")","(")<CR>]])
vim.cmd([[nnoremap  cs)` <Cmd>lua require'surround'.surround_replace(")","`")<CR>]])
vim.cmd([[nnoremap  cs)" <Cmd>lua require'surround'.surround_replace(")",'"')<CR>]])
vim.cmd([[nnoremap  cs)] <Cmd>lua require'surround'.surround_replace(")","]")<CR>]])
vim.cmd([[nnoremap  cs)} <Cmd>lua require'surround'.surround_replace(")","}")<CR>]])
vim.cmd([[nnoremap  cs)[ <Cmd>lua require'surround'.surround_replace(")","[")<CR>]])
vim.cmd([[nnoremap  cs)f <Cmd>lua require'surround'.surround_replace(")","f")<CR>]])
vim.cmd([[nnoremap  cs){ <Cmd>lua require'surround'.surround_replace(")","{")<CR>]])
vim.cmd([[nnoremap  cs)( <Cmd>lua require'surround'.surround_replace(")","(")<CR>]])
vim.cmd([[nnoremap  cs'B <Cmd>lua require'surround'.surround_replace("'","{")<CR>]])
vim.cmd([[nnoremap  cs') <Cmd>lua require'surround'.surround_replace("'",")")<CR>]])
vim.cmd([[nnoremap  cs'' <Cmd>lua require'surround'.surround_replace("'","'")<CR>]])
vim.cmd([[nnoremap  cs'b <Cmd>lua require'surround'.surround_replace("'","(")<CR>]])
vim.cmd([[nnoremap  cs'` <Cmd>lua require'surround'.surround_replace("'","`")<CR>]])
vim.cmd([[nnoremap  cs'" <Cmd>lua require'surround'.surround_replace("'",'"')<CR>]])
vim.cmd([[nnoremap  cs'] <Cmd>lua require'surround'.surround_replace("'","]")<CR>]])
vim.cmd([[nnoremap  cs'} <Cmd>lua require'surround'.surround_replace("'","}")<CR>]])
vim.cmd([[nnoremap  cs'[ <Cmd>lua require'surround'.surround_replace("'","[")<CR>]])
vim.cmd([[nnoremap  cs'f <Cmd>lua require'surround'.surround_replace("'","f")<CR>]])
vim.cmd([[nnoremap  cs'{ <Cmd>lua require'surround'.surround_replace("'","{")<CR>]])
vim.cmd([[nnoremap  cs'( <Cmd>lua require'surround'.surround_replace("'","(")<CR>]])
vim.cmd([[nnoremap  csbB <Cmd>lua require'surround'.surround_replace("(","{")<CR>]])
vim.cmd([[nnoremap  csb) <Cmd>lua require'surround'.surround_replace("(",")")<CR>]])
vim.cmd([[nnoremap  csb' <Cmd>lua require'surround'.surround_replace("(","'")<CR>]])
vim.cmd([[nnoremap  csbb <Cmd>lua require'surround'.surround_replace("(","(")<CR>]])
vim.cmd([[nnoremap  csb` <Cmd>lua require'surround'.surround_replace("(","`")<CR>]])
vim.cmd([[nnoremap  csb" <Cmd>lua require'surround'.surround_replace("(",'"')<CR>]])
vim.cmd([[nnoremap  csb] <Cmd>lua require'surround'.surround_replace("(","]")<CR>]])
vim.cmd([[nnoremap  csb} <Cmd>lua require'surround'.surround_replace("(","}")<CR>]])
vim.cmd([[nnoremap  csb[ <Cmd>lua require'surround'.surround_replace("(","[")<CR>]])
vim.cmd([[nnoremap  csbf <Cmd>lua require'surround'.surround_replace("(","f")<CR>]])
vim.cmd([[nnoremap  csb{ <Cmd>lua require'surround'.surround_replace("(","{")<CR>]])
vim.cmd([[nnoremap  csb( <Cmd>lua require'surround'.surround_replace("(","(")<CR>]])
vim.cmd([[nnoremap  cs`B <Cmd>lua require'surround'.surround_replace("`","{")<CR>]])
vim.cmd([[nnoremap  cs`) <Cmd>lua require'surround'.surround_replace("`",")")<CR>]])
vim.cmd([[nnoremap  cs`' <Cmd>lua require'surround'.surround_replace("`","'")<CR>]])
vim.cmd([[nnoremap  cs`b <Cmd>lua require'surround'.surround_replace("`","(")<CR>]])
vim.cmd([[nnoremap  cs`` <Cmd>lua require'surround'.surround_replace("`","`")<CR>]])
vim.cmd([[nnoremap  cs`" <Cmd>lua require'surround'.surround_replace("`",'"')<CR>]])
vim.cmd([[nnoremap  cs`] <Cmd>lua require'surround'.surround_replace("`","]")<CR>]])
vim.cmd([[nnoremap  cs`} <Cmd>lua require'surround'.surround_replace("`","}")<CR>]])
vim.cmd([[nnoremap  cs`[ <Cmd>lua require'surround'.surround_replace("`","[")<CR>]])
vim.cmd([[nnoremap  cs`f <Cmd>lua require'surround'.surround_replace("`","f")<CR>]])
vim.cmd([[nnoremap  cs`{ <Cmd>lua require'surround'.surround_replace("`","{")<CR>]])
vim.cmd([[nnoremap  cs`( <Cmd>lua require'surround'.surround_replace("`","(")<CR>]])
vim.cmd([[nnoremap  cs"B <Cmd>lua require'surround'.surround_replace('"',"{")<CR>]])
vim.cmd([[nnoremap  cs") <Cmd>lua require'surround'.surround_replace('"',")")<CR>]])
vim.cmd([[nnoremap  cs"' <Cmd>lua require'surround'.surround_replace('"',"'")<CR>]])
vim.cmd([[nnoremap  cs"b <Cmd>lua require'surround'.surround_replace('"',"(")<CR>]])
vim.cmd([[nnoremap  cs"` <Cmd>lua require'surround'.surround_replace('"',"`")<CR>]])
vim.cmd([[nnoremap  cs"" <Cmd>lua require'surround'.surround_replace('"','"')<CR>]])
vim.cmd([[nnoremap  cs"] <Cmd>lua require'surround'.surround_replace('"',"]")<CR>]])
vim.cmd([[nnoremap  cs"} <Cmd>lua require'surround'.surround_replace('"',"}")<CR>]])
vim.cmd([[nnoremap  cs"[ <Cmd>lua require'surround'.surround_replace('"',"[")<CR>]])
vim.cmd([[nnoremap  cs"f <Cmd>lua require'surround'.surround_replace('"',"f")<CR>]])
vim.cmd([[nnoremap  cs"{ <Cmd>lua require'surround'.surround_replace('"',"{")<CR>]])
vim.cmd([[nnoremap  cs"( <Cmd>lua require'surround'.surround_replace('"',"(")<CR>]])
vim.cmd([[nnoremap  cs]B <Cmd>lua require'surround'.surround_replace("]","{")<CR>]])
vim.cmd([[nnoremap  cs]) <Cmd>lua require'surround'.surround_replace("]",")")<CR>]])
vim.cmd([[nnoremap  cs]' <Cmd>lua require'surround'.surround_replace("]","'")<CR>]])
vim.cmd([[nnoremap  cs]b <Cmd>lua require'surround'.surround_replace("]","(")<CR>]])
vim.cmd([[nnoremap  cs]` <Cmd>lua require'surround'.surround_replace("]","`")<CR>]])
vim.cmd([[nnoremap  cs]" <Cmd>lua require'surround'.surround_replace("]",'"')<CR>]])
-- vim.cmd([[nnoremap  cs]] <Cmd>lua require'surround'.surround_replace("]","]")<CR>]])
vim.cmd([[nnoremap  cs]} <Cmd>lua require'surround'.surround_replace("]","}")<CR>]])
vim.cmd([[nnoremap  cs][ <Cmd>lua require'surround'.surround_replace("]","[")<CR>]])
vim.cmd([[nnoremap  cs]f <Cmd>lua require'surround'.surround_replace("]","f")<CR>]])
vim.cmd([[nnoremap  cs]{ <Cmd>lua require'surround'.surround_replace("]","{")<CR>]])
vim.cmd([[nnoremap  cs]( <Cmd>lua require'surround'.surround_replace("]","(")<CR>]])
vim.cmd([[nnoremap  cs}B <Cmd>lua require'surround'.surround_replace("}","{")<CR>]])
vim.cmd([[nnoremap  cs}) <Cmd>lua require'surround'.surround_replace("}",")")<CR>]])
vim.cmd([[nnoremap  cs}' <Cmd>lua require'surround'.surround_replace("}","'")<CR>]])
vim.cmd([[nnoremap  cs}b <Cmd>lua require'surround'.surround_replace("}","(")<CR>]])
vim.cmd([[nnoremap  cs}` <Cmd>lua require'surround'.surround_replace("}","`")<CR>]])
vim.cmd([[nnoremap  cs}" <Cmd>lua require'surround'.surround_replace("}",'"')<CR>]])
vim.cmd([[nnoremap  cs}] <Cmd>lua require'surround'.surround_replace("}","]")<CR>]])
vim.cmd([[nnoremap  cs}} <Cmd>lua require'surround'.surround_replace("}","}")<CR>]])
vim.cmd([[nnoremap  cs}[ <Cmd>lua require'surround'.surround_replace("}","[")<CR>]])
vim.cmd([[nnoremap  cs}f <Cmd>lua require'surround'.surround_replace("}","f")<CR>]])
vim.cmd([[nnoremap  cs}{ <Cmd>lua require'surround'.surround_replace("}","{")<CR>]])
vim.cmd([[nnoremap  cs}( <Cmd>lua require'surround'.surround_replace("}","(")<CR>]])
vim.cmd([[nnoremap  cs[B <Cmd>lua require'surround'.surround_replace("[","{")<CR>]])
vim.cmd([[nnoremap  cs[) <Cmd>lua require'surround'.surround_replace("[",")")<CR>]])
vim.cmd([[nnoremap  cs[' <Cmd>lua require'surround'.surround_replace("[","'")<CR>]])
vim.cmd([[nnoremap  cs[b <Cmd>lua require'surround'.surround_replace("[","(")<CR>]])
vim.cmd([[nnoremap  cs[` <Cmd>lua require'surround'.surround_replace("[","`")<CR>]])
vim.cmd([[nnoremap  cs[" <Cmd>lua require'surround'.surround_replace("[",'"')<CR>]])
vim.cmd([[nnoremap  cs[] <Cmd>lua require'surround'.surround_replace("[","]")<CR>]])
vim.cmd([[nnoremap  cs[} <Cmd>lua require'surround'.surround_replace("[","}")<CR>]])
vim.cmd([[nnoremap  cs[[ <Cmd>lua require'surround'.surround_replace("[","[")<CR>]])
vim.cmd([[nnoremap  cs[f <Cmd>lua require'surround'.surround_replace("[","f")<CR>]])
vim.cmd([[nnoremap  cs[{ <Cmd>lua require'surround'.surround_replace("[","{")<CR>]])
vim.cmd([[nnoremap  cs[( <Cmd>lua require'surround'.surround_replace("[","(")<CR>]])
vim.cmd([[nnoremap  csfB <Cmd>lua require'surround'.surround_replace("f","{")<CR>]])
vim.cmd([[nnoremap  csf) <Cmd>lua require'surround'.surround_replace("f",")")<CR>]])
vim.cmd([[nnoremap  csf' <Cmd>lua require'surround'.surround_replace("f","'")<CR>]])
vim.cmd([[nnoremap  csfb <Cmd>lua require'surround'.surround_replace("f","(")<CR>]])
vim.cmd([[nnoremap  csf` <Cmd>lua require'surround'.surround_replace("f","`")<CR>]])
vim.cmd([[nnoremap  csf" <Cmd>lua require'surround'.surround_replace("f",'"')<CR>]])
vim.cmd([[nnoremap  csf] <Cmd>lua require'surround'.surround_replace("f","]")<CR>]])
vim.cmd([[nnoremap  csf} <Cmd>lua require'surround'.surround_replace("f","}")<CR>]])
vim.cmd([[nnoremap  csf[ <Cmd>lua require'surround'.surround_replace("f","[")<CR>]])
vim.cmd([[nnoremap  csff <Cmd>lua require'surround'.surround_replace("f","f")<CR>]])
vim.cmd([[nnoremap  csf{ <Cmd>lua require'surround'.surround_replace("f","{")<CR>]])
vim.cmd([[nnoremap  csf( <Cmd>lua require'surround'.surround_replace("f","(")<CR>]])
vim.cmd([[nnoremap  cs{B <Cmd>lua require'surround'.surround_replace("{","{")<CR>]])
vim.cmd([[nnoremap  cs{) <Cmd>lua require'surround'.surround_replace("{",")")<CR>]])
vim.cmd([[nnoremap  cs{' <Cmd>lua require'surround'.surround_replace("{","'")<CR>]])
vim.cmd([[nnoremap  cs{b <Cmd>lua require'surround'.surround_replace("{","(")<CR>]])
vim.cmd([[nnoremap  cs{` <Cmd>lua require'surround'.surround_replace("{","`")<CR>]])
vim.cmd([[nnoremap  cs{" <Cmd>lua require'surround'.surround_replace("{",'"')<CR>]])
vim.cmd([[nnoremap  cs{] <Cmd>lua require'surround'.surround_replace("{","]")<CR>]])
vim.cmd([[nnoremap  cs{} <Cmd>lua require'surround'.surround_replace("{","}")<CR>]])
vim.cmd([[nnoremap  cs{[ <Cmd>lua require'surround'.surround_replace("{","[")<CR>]])
vim.cmd([[nnoremap  cs{f <Cmd>lua require'surround'.surround_replace("{","f")<CR>]])
vim.cmd([[nnoremap  cs{{ <Cmd>lua require'surround'.surround_replace("{","{")<CR>]])
vim.cmd([[nnoremap  cs{( <Cmd>lua require'surround'.surround_replace("{","(")<CR>]])
vim.cmd([[nnoremap  cs(B <Cmd>lua require'surround'.surround_replace("(","{")<CR>]])
vim.cmd([[nnoremap  cs() <Cmd>lua require'surround'.surround_replace("(",")")<CR>]])
vim.cmd([[nnoremap  cs(' <Cmd>lua require'surround'.surround_replace("(","'")<CR>]])
vim.cmd([[nnoremap  cs(b <Cmd>lua require'surround'.surround_replace("(","(")<CR>]])
vim.cmd([[nnoremap  cs(` <Cmd>lua require'surround'.surround_replace("(","`")<CR>]])
vim.cmd([[nnoremap  cs(" <Cmd>lua require'surround'.surround_replace("(",'"')<CR>]])
vim.cmd([[nnoremap  cs(] <Cmd>lua require'surround'.surround_replace("(","]")<CR>]])
vim.cmd([[nnoremap  cs(} <Cmd>lua require'surround'.surround_replace("(","}")<CR>]])
vim.cmd([[nnoremap  cs([ <Cmd>lua require'surround'.surround_replace("(","[")<CR>]])
vim.cmd([[nnoremap  cs(f <Cmd>lua require'surround'.surround_replace("(","f")<CR>]])
vim.cmd([[nnoremap  cs({ <Cmd>lua require'surround'.surround_replace("(","{")<CR>]])
vim.cmd([[nnoremap  cs(( <Cmd>lua require'surround'.surround_replace("(","(")<CR>]])
vim.cmd([[nnoremap  cq   <Cmd>lua require'surround'.toggle_quotes()<CR>]])
vim.cmd([[nnoremap  dsB  <Cmd>lua require'surround'.surround_delete("{")<CR>]])
vim.cmd([[nnoremap  ds)  <Cmd>lua require'surround'.surround_delete(")")<CR>]])
vim.cmd([[nnoremap  ds'  <Cmd>lua require'surround'.surround_delete("'")<CR>]])
vim.cmd([[nnoremap  dsb  <Cmd>lua require'surround'.surround_delete("(")<CR>]])
vim.cmd([[nnoremap  ds`  <Cmd>lua require'surround'.surround_delete("`")<CR>]])
vim.cmd([[nnoremap  ds"  <Cmd>lua require'surround'.surround_delete('"')<CR>]])
vim.cmd([[nnoremap  ds]  <Cmd>lua require'surround'.surround_delete("]")<CR>]])
vim.cmd([[nnoremap  ds}  <Cmd>lua require'surround'.surround_delete("}")<CR>]])
vim.cmd([[nnoremap  ds[  <Cmd>lua require'surround'.surround_delete("[")<CR>]])
vim.cmd([[nnoremap  dsf  <Cmd>lua require'surround'.surround_delete("f")<CR>]])
vim.cmd([[nnoremap  ds{  <Cmd>lua require'surround'.surround_delete("{")<CR>]])
vim.cmd([[nnoremap  ds(  <Cmd>lua require'surround'.surround_delete("(")<CR>]])
vim.cmd([[vnoremap  s{   <Cmd>lua require'surround'.surround_add("{")<CR>]])
vim.cmd([[vnoremap  sf   <Cmd>lua require'surround'.surround_add("f")<CR>]])
vim.cmd([[vnoremap  sB   <Cmd>lua require'surround'.surround_add("{")<CR>]])
vim.cmd([[vnoremap  s`   <Cmd>lua require'surround'.surround_add("`")<CR>]])
vim.cmd([[vnoremap  s[   <Cmd>lua require'surround'.surround_add("[")<CR>]])
vim.cmd([[vnoremap  s}   <Cmd>lua require'surround'.surround_add("}")<CR>]])
vim.cmd([[vnoremap  sb   <Cmd>lua require'surround'.surround_add("(")<CR>]])
vim.cmd([[vnoremap  s"   <Cmd>lua require'surround'.surround_add('"')<CR>]])
vim.cmd([[vnoremap  s'   <Cmd>lua require'surround'.surround_add("'")<CR>]])
vim.cmd([[vnoremap  s]   <Cmd>lua require'surround'.surround_add("]")<CR>]])
vim.cmd([[vnoremap  s(   <Cmd>lua require'surround'.surround_add("(")<CR>]])
vim.cmd([[vnoremap  s)   <Cmd>lua require'surround'.surround_add(")")<CR>]])

-- prefix: prefix for sandwich mode. (default: s)
-- pairs: dictionary or lua table of form { nestable: {{},...}, linear: {{},....} } where linear is an array of arrays which contain non nestable pairs of surrounding characters first opening and second closing like ", ' and nestable is an array of arrays which contain nestable pairs of surrounding characters like (, {, [. (default: { nestable = { {"(", ")"}, {"[", "]"}, {"{", "}"} }, linear = { {"'", "'"}, {'"', '"'} } })
-- context_offset: number of lines to look for above and below the current line while searching for nestable pairs. (default: 100)
-- load_autogroups: whether to load inbuilt autogroups or not. (default: false)
-- mappings_style: "surround" or "sandwich" (default: sandwich)
-- load_keymaps: whether to load inbuilt keymaps or not. (default: true)
-- quotes: an array of items to be considered as quotes while cycling through them. (default: ["'", '"']
-- brackets: an array of items to be considered as brackets while cycling through them. (default: ["(", "{", "["]

-- Provides key mapping to add surrounding characters.( visually select then press s<char> or press ys{motion}{char})
-- Provides key mapping to replace surrounding characters.( cs<from><to> )
-- Provides key mapping to delete surrounding characters.( ds<char> )
-- ss repeats last surround command.
-- nsert Mode
-- <c-s><char> will insert both pairs in insert mode.
-- <c-s><char><space> will insert both pairs in insert mode with surrounding whitespace.
-- <c-s><char><c-s> will insert both pairs on newlines insert mode.

-- prefix: prefix for sandwich mode. (default: s)
-- pairs: dictionary or lua table of form { nestable: {{},...}, linear: {{},....} } where linear is an array of arrays which contain non nestable pairs of surrounding characters first opening and second closing like ", ' and nestable is an array of arrays which contain nestable pairs of surrounding characters like (, {, [. (default: { nestable = { {"(", ")"}, {"[", "]"}, {"{", "}"} }, linear = { {"'", "'"}, {'"', '"'} } })
-- context_offset: number of lines to look for above and below the current line while searching for nestable pairs. (default: 100)
-- load_autogroups: whether to load inbuilt autogroups or not. (default: false)
-- mappings_style: "surround" or "sandwich" (default: sandwich)
-- load_keymaps: whether to load inbuilt keymaps or not. (default: true)
-- quotes: an array of items to be considered as quotes while cycling through them. (default: ["'", '"']
-- brackets: an array of items to be considered as brackets while cycling through them. (default: ["(", "{", "["]
