# depends on powerline settings (~/.config/powerline/themes/tmux)
run-shell "powerline-daemon -q"
run-shell "$POWERLINE_CONFIG_COMMAND tmux setup"

# source "/usr/local/lib/python3.8/dist-packages/powerline/bindings/tmux/powerline.conf"
source "/usr/share/powerline/bindings/tmux/powerline.conf"

set -g update-environment "POWERLINE_CONFIG_OVERRIDES"

set -g default-shell /bin/zsh
set -wg xterm-keys on
set -sg escape-time 0

set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
# set -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# Use Vi mode
setw -g mode-keys vi

set -g focus-events on

unbind C-b
set -g prefix C-a

# repeatable keys delay
set -g repeat-time 200

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# Faster key repeitition
set -s escape-time 50
set -g status-keys vi

# term fixes
setw -g xterm-keys on
set -q -g status-utf8 on
setw -q -g utf8 on

# mouse settings
set -g mouse on

# Toggle mouse with ^M; then report it's new status
# bind-key M set-option -g mouse \; display-message 'Mouse #{?mouse,on,off}'

# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g automatic-rename-format '#{b:pane_current_path}'

# set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 1     # redraw status line every 5 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off

# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# Last active window
unbind l
bind l last-window

# -- copy/paste mode ----------------------------------------------------------------

# Copy/Paste mode
### to copy and paste Ctrl-a-[ ... make selection ... Ctrl-a-]
### or Ctrl-a ... select with y ... Ctrl-a-p
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
# bind-key p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'Y' send -X copy-end-of-line
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
bind b list-buffers  # list paste buffers

# copy to X11 clipboard
# if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
# if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# make mousewheel work when not in copy mode
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# clipboard mode, on, external, or off
# on allows inside applications to edit tmux buffer
set -s set-clipboard on


# -- other ---------------------------------------------------------------------

# key bindings for splitting
unbind %
bind h split-window -hc '#{pane_current_path}'
unbind '"'
bind v split-window -vc '#{pane_current_path}'

# History
set -g history-limit 300000

# Terminal emulator window title
# set -g set-titles on
# set -g set-titles-string '#S:#I.#P #W'

# allow shared sessions to size differently
setw -g aggressive-resize on

# rotate pane with panes in next window
bind-key C-n swap-pane -s :+.top \; rotate-window -Ut :+
# bind-key -n C-S-n swap-pane -s :+.bottom \;  rotate-window -Dt :+

#(date)	shell command
#I	window index        #S	session name
#W	window name         #F	window flags
#H	Hostname            #h	Hostname, short
#D	pane id             #P	pane index        #T	pane title

bind-key R source-file ~/.tmux.conf \; \
	display-message "source-file done"

# window switching
unbind n
bind = next-window
bind - previous-window
bind -n M-Space next-window
bind -n C-Right next-window
bind -n C-Left previous-window

# colon :
bind : command-prompt

# messaging
# set -g message-style fg=colour235
# set -g message-style bg=colour166
# set -g message-command-style fg=blue
# set -g message-command-style bg=black
set -g mode-style "fg=#56ffcc,bg=#003880"

set-option -g status-position top

# update status bar every 5 seconds
set -g status-interval 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# pane selection, use autokey to bind Ctrl+Shift+h/j/k/l to these
# bind-key -n C-Up if-shell "$is_only_window" "select-pane -U"
# bind-key -n C-Down if-shell "$is_only_window" "select-pane -D"
# bind C-H if-shell "$is_only_window" "send-keys 'POOP'" "send-keys 'FACE'"
# bind-key -n C-Right if-shell "$is_only_window" "select-pane -R"

# bind-key -n '^[[1;4D' if-shell "$is_vim" 'send-keys C-w l'  'select-pane -L'
# bind-key -n '^[[1;4A' if-shell "$is_vim" 'send-keys C-w k'  'select-pane -U'
# bind-key -n '^[[1;4C' if-shell "$is_vim" 'send-keys C-w j'  'select-pane -D'
# bind-key -n '^[[1;4B' if-shell "$is_vim" 'send-keys C-w h'  'select-pane -R'

bind-key -n 'M-Up' if-shell "$is_vim" 'send-keys C-w k'  'select-pane -U'
bind-key -n 'M-Down' if-shell "$is_vim" 'send-keys C-w j'  'select-pane -D'
bind-key -n 'M-Left' if-shell "$is_vim" 'send-keys C-w h'  'select-pane -L'
bind-key -n 'M-Right' if-shell "$is_vim" 'send-keys C-w l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# example of caling a custom variable in a segment
tmux_conf_theme_status_right='#{prefix}#{pairing}#{synchronized} #(curl -m 1 wttr.in?format=3 2>/dev/null; sleep 900) , %R , %d %b | #{username}#{root} | #{hostname} '

# https://github.com/jimeh/tmux-themepack

source $HOME/.config/tmux/tmux.plugins.conf

# custom theme based on nord
run-shell $HOME/.config/tmux/tmux.colors.sh

# active window pane styles
set -g window-style 'fg=colour244'
set -g window-active-style 'fg=colour250'

# set the pane border colors
set -g pane-border-style 'fg=colour232,bg=colour234'
set -g pane-active-border-style 'fg=colour63,bg=colour232'
# set -g pane-active-border-style 'fg=colour69,bg=colour232'

# panes border styles
# set -g pane-border-style 'fg=#aa4444,bg=#110000'
# set -g pane-active-border-style 'fg=#88ccff,bg=#002233'
set -g pane-border-lines heavy
             # single  single lines using ACS or UTF-8 characters
             # double  double lines using UTF-8 characters
             # heavy   heavy lines using UTF-8 characters
             # simple  simple ASCII characters
             # number  the pane number


