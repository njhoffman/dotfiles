# depends on powerline settings (~/.config/powerline/themes/tmux)
run-shell "powerline-daemon -q"
run-shell "$POWERLINE_CONFIG_COMMAND tmux setup"

set -g update-environment "POWERLINE_CONFIG_OVERRIDES"

set -g default-shell /bin/zsh

set  -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
# set -ag terminal-overrides ",alacritty:RGB"

unbind C-b
# set -g extended-keys on
set -g prefix C-a
set -g history-limit 300000
set -g repeat-time 500
set -s escape-time 10
set -g status-keys vi
set -g focus-events on
setw -g mode-keys vi

# term fixes
setw -g xterm-keys on
set -q -g status-utf8 on
setw -q -g utf8 on

# allow shared sessions to size differently
# mouse settings
set -g mouse on

# Toggle mouse with ^M; then report it's new status
# bind-key M set-option -g mouse \; display-message 'Mouse #{?mouse,on,off}'

# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g status-position top    # status bar on top
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 1      # redraw status line every 1 seconds
setw -g aggressive-resize on  # resize shared sessions
set -g monitor-activity on
set -g visual-activity off

set -g automatic-rename-format '#{b:pane_current_path}'

# set -g set-titles on          # set terminal title
# set -g set-titles-string '#S:#I.#P #W'
# tmux set -g pane-border-format "#{pane_index} #T"

# messaging
# set -g message-style fg=colour235
# set -g message-style bg=colour166
# set -g message-command-style fg=blue
# set -g message-command-style bg=black
set -g mode-style "fg=#56ffcc,bg=#003880"

# -- navigation ----------------------------------------------------------------
# create session
bind C-c new-session

# pfx+C ... dynamic settings modify

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# navigate session
bind S choose-tree -Z

# kill session without detaching the client
bind d run "tmux confirm-before -p \" kill-session '#S'? (y/n)\" \"new-session -As scratch ; kill-session -t '=#S'\""
bind D run "tmux confirm-before -p \" kill-session '#S'? (y/n)\" \"kill-session -t '=#S'\""
bind BSpace run "tmux confirm-before -p \" reset-session '#S'? (y/n)\" \"kill-window -a ; kill-pane -a\""


# -- copy/paste mode ----------------------------------------------------------------
### to copy and paste Ctrl-a-[ ... make selection ... Ctrl-a-]
### or Ctrl-a ... select with y ... Ctrl-a-p
unbind [
bind Escape copy-mode
bind Enter copy-mode # enter copy mode
unbind p
bind p paste-buffer

bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'Y' send -X copy-end-of-line
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\\' select-pane -l


run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'

run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'

run -b 'tmux bind -t vi-copy y copy-selection "xsel -i -ib && xsel -o -b" 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection 2> /dev/null || true'

run -b 'tuux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'

run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'

run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
bind b list-buffers  # list paste buffers

bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# make mousewheel work when not in copy mode
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# clipboard mode, on, external, or off
# on allows inside applications to edit tmux buffer
set -s set-clipboard on

# -- windows ---------------------------------------------------------------------
# cycle layouts (even-horizontal, even-vertical, main-horizontal, main-vertical, tiled)
bind \\ select-layout even-vertical
bind | select-layout even-horizontal

bind h split-window -hc '#{pane_current_path}'
bind v split-window -vc '#{pane_current_path}'

unbind l
bind l last-window
# bind-key -T prefix \;  last-pane
bind-key -T prefix \;  next-window

# window switching
unbind n
bind = next-window
bind - previous-window
bind -n M-Space next-window
bind -n C-Right next-window
bind -n C-Left previous-window


# -- panes ---------------------------------------------------------------------
# pane resizing
bind-key -r + resize-pane -U 10
bind-key -r - resize-pane -D 10
bind-key -r < resize-pane -L 10
bind-key -r > resize-pane -R 10
bind-key -r C-j resize-pane -D
bind-key -r C-k resize-pane -U
bind-key -r C-h resize-pane -L
bind-key -r C-l resize-pane -R

# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one
# 3.2 run -C display-popup

# maximize current pane
bind + run 'cut -c3- ~/.config/tmux/tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# rotate pane with panes in next window (use Pfx+o for easy swapping/rotating)
bind-key C-n swap-pane -s :+.top \; rotate-window -Ut :+
# bind-key -n C-S-n swap-pane -s :+.bottom \;  rotate-window -Dt :+

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'M-Up' if-shell "$is_vim" 'send-keys C-w k'  'select-pane -U'
bind-key -n 'M-Down' if-shell "$is_vim" 'send-keys C-w j'  'select-pane -D'
bind-key -n 'M-Left' if-shell "$is_vim" 'send-keys C-w h'  'select-pane -L'
bind-key -n 'M-Right' if-shell "$is_vim" 'send-keys C-w l'  'select-pane -R'
# pane selection, use autokey to bind Ctrl+Shift+h/j/k/l to these
# bind-key -n C-Up if-shell "$is_only_window" "select-pane -U"
# bind-key -n C-Down if-shell "$is_only_window" "select-pane -D"
# bind-key -n C-Right if-shell "$is_only_window" "select-pane -R"
# bind -T copy-mode-vi C-o send -X copy-pipe-and-cancel 'read url; firefox -new-tab "$url"; i3-focus -c Chrome -m -'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# -- other ---------------------------------------------------------------------
# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

#(date) shell command
#I  window index        #S  session name
#W  window name         #F  window flags
#H  Hostname            #h  Hostname, short
#D  pane id             #P  pane index        #T  pane title

bind-key R source-file ~/.tmux.conf \; display-message "source-file done"
bind : command-prompt

# example of caling a custom variable in a segment
tmux_conf_theme_status_right='#{prefix}#{pairing}#{synchronized} #(curl -m 1 wttr.in?format=3 2>/dev/null; sleep 900) , %R , %d %b | #{username}#{root} | #{hostname} '

source $HOME/.config/tmux/tmux.plugins.conf

# custom theme based on nord
run-shell $HOME/.config/tmux/tmux.colors.sh

# active window pane styles
# set -g window-style 'fg=colour244'
# set -g window-active-style 'fg=colour250'

setw -g status-justify absolute-centre

set -g window-style 'fg=colour244'
set -g window-active-style 'fg=colour250,bg=#000008'

# set the pane border colors
set -g pane-border-style 'fg=colour232,bg=colour234'
set -g pane-active-border-style 'fg=colour63,bg=colour232'
# set -g pane-active-border-style 'fg=colour69,bg=colour232'

# change status color when in copy mode
# set-hook -g pane-mode-changed 'if -F "#{m/r:(copy|view)-mode,#{pane_mode}}" "set status-style bg=red" "set -u status-style"'
# set-hook -g pane-mode-changed { if -F "#{pane_in_mode}" "selectp -P bg=#224455" "selectp -P bg=none" }
set-hook -g pane-mode-changed { if -F "#{pane_in_mode}" "set pane-active-border-style fg=#aa4444" "set pane-active-border-style fg=#4444ff" }

# panes border styles
# set -g pane-border-style 'fg=#aa4444,bg=#110000'
# set -g pane-active-border-style 'fg=#88ccff,bg=#002233'
set -g pane-border-lines heavy
# single  single lines using ACS or UTF-8 characters
# double  double lines using UTF-8 characters
# heavy   heavy lines using UTF-8 characters
# simple  simple ASCII characters
# number  the pane number
